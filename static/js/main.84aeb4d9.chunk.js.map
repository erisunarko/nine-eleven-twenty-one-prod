{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TodoComplete","todo","index","setSelectedTodo","className","title","description","status","Button","variant","onClick","TodoInComplete","setTodos","a","fetch","then","res","json","catch","alert","App","React","useEffect","getData","useState","todos","id","createdAt","selectedTodo","updateTodo","show","setShow","handleClose","setTitleValue","setDescriptionValue","setStatusValue","titleValue","descriptionValue","statusValue","map","key","Modal","onHide","Header","closeButton","Title","Body","Form","Group","Label","Control","type","name","placeholder","onChange","e","target","value","Select","parseInt","Footer","newTodos","updateTodos","splice","removeTodo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8TAMA,SAASA,EAAT,GAAyD,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,gBACnC,OACE,yBAAKC,UAAU,QACb,6BACE,8BACGH,EAAKI,OAER,6BACA,8BACGJ,EAAKK,aAER,6BACA,yCACWL,EAAKM,SAGlB,6BACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAMP,EAAgBF,EAAMC,KAA/D,UAMR,SAASS,EAAT,GAA2D,IAAjCV,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,gBACrC,OACE,yBAAKC,UAAU,QACb,6BACE,8BACGH,EAAKI,OAER,6BACA,8BACGJ,EAAKK,aAER,6BACA,yCACWL,EAAKM,SAGlB,6BACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAMP,EAAgBF,EAAMC,KAA/D,U,4CAMN,WAAuBU,GAAvB,eAAAC,EAAA,4DACiB,mEADjB,SAGkBC,MAFD,oEAEeC,MAAK,SAAAC,GACjC,OAAOA,EAAIC,UACVC,OAAM,WACPC,MAAM,iCANV,OAGMH,EAHN,OAUEJ,EAASI,GAVX,4C,sBAyJeI,MA5If,WACEC,IAAMC,WAAU,Y,oCACdC,CAAQX,KACP,IAHU,MAKaS,IAAMG,SAAS,IAL5B,mBAKNC,EALM,KAKCb,EALD,OAMsBY,mBACjC,CACEtB,MAAO,EACPwB,GAAK,EACLrB,MAAQ,GACRC,YAAc,GACdC,OAAS,EACToB,UAAY,KAbH,mBAMNC,EANM,KAMQC,EANR,OAgBWL,oBAAS,GAhBpB,mBAgBNM,EAhBM,KAgBAC,EAhBA,KAiBPC,EAAc,kBAAMD,GAAQ,IAE5B5B,EAAkB,SAACF,EAAMC,GADN6B,GAAQ,GAG/B9B,EAAKC,MAAQA,EACb2B,EAAW5B,GACXgC,EAAchC,EAAKI,OACnB6B,EAAoBjC,EAAKK,aACzB6B,EAAelC,EAAKM,SAzBT,EAyCuBiB,mBAAS,IAzChC,mBAyCNY,EAzCM,KAyCMH,EAzCN,OA6CmCT,mBAAS,IA7C5C,mBA6CNa,EA7CM,KA6CYH,EA7CZ,OAiDyBV,mBAAS,GAjDlC,mBAiDNc,EAjDM,KAiDOH,EAjDP,KAsDb,OACE,yBAAK/B,UAAU,OACb,yBAAKA,UAAU,kBACZqB,EAAMc,KAAI,SAACtC,EAAMC,GAChB,GAAmB,IAAhBD,EAAKM,OACN,OAAO,kBAACP,EAAD,CACLwC,IAAKtC,EACLA,MAAOA,EACPD,KAAMA,EACNE,gBAAiBA,QAMzB,yBAAKC,UAAU,kBACZqB,EAAMc,KAAI,SAACtC,EAAMC,GAChB,GAAmB,IAAhBD,EAAKM,OACN,OAAO,kBAACI,EAAD,CACL6B,IAAKtC,EACLA,MAAOA,EACPD,KAAMA,EACNE,gBAAiBA,QAMzB,kBAACsC,EAAA,EAAD,CAAOX,KAAMA,EAAMY,OAAQV,GACzB,kBAACS,EAAA,EAAME,OAAP,CAAcC,aAAW,GACvB,kBAACH,EAAA,EAAMI,MAAP,eAGF,kBAACJ,EAAA,EAAMK,KAAP,KACE,6BACE,kBAACC,EAAA,EAAKC,MAAN,CAAY5C,UAAU,QACpB,kBAAC2C,EAAA,EAAKE,MAAN,cACA,kBAACF,EAAA,EAAKG,QAAN,CACEC,KAAK,OACLC,KAAK,QACLC,YAAY,QACZC,SArDQ,SAAAC,GACpBtB,EAAcsB,EAAEC,OAAOC,QAqDXA,MAAOrB,MAIb,6BACE,kBAACW,EAAA,EAAKC,MAAN,CAAY5C,UAAU,QACpB,kBAAC2C,EAAA,EAAKE,MAAN,oBACA,kBAACF,EAAA,EAAKG,QAAN,CACEC,KAAK,OACLC,KAAK,cACLC,YAAY,cACZC,SA7Dc,SAAAC,GAC1BrB,EAAoBqB,EAAEC,OAAOC,QA6DjBA,MAAOpB,MAIb,6BACE,kBAACU,EAAA,EAAKC,MAAN,CAAY5C,UAAU,QACpB,kBAAC2C,EAAA,EAAKE,MAAN,eACA,kBAACF,EAAA,EAAKW,OAAN,CAAaJ,SAjEF,SAAAC,GACrBpB,EAAewB,SAASJ,EAAEC,OAAOC,UAiErB,0CACA,4BAAQA,MAAO,GAAf,aACA,4BAAQA,MAAO,GAAf,oBAMR,kBAAChB,EAAA,EAAMmB,OAAP,KACE,kBAACpD,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAlGvB,SAAAR,GAClB,IAAM2D,EAAQ,YAAOpC,GACrBoC,EAAS3D,GAAOG,MAAQ+B,EACxByB,EAAS3D,GAAOI,YAAc+B,EAC9BwB,EAAS3D,GAAOK,OAAS+B,EACzB1B,EAASiD,GACT7B,IA4F+C8B,CAAYlC,EAAa1B,SAAlE,UAGyB,IAAxB0B,EAAarB,OACV,kBAACC,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAAS,kBA9F3B,SAAAR,GACjB,IAAM2D,EAAQ,YAAOpC,GACrBoC,EAASE,OAAO7D,EAAO,GACvBU,EAASiD,GACT7B,IA0FkDgC,CAAWpC,EAAa1B,SAAhE,UAGA,OCzLM+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7D,MAAK,SAAA8D,GACjCA,EAAaC,kB","file":"static/js/main.84aeb4d9.chunk.js","sourcesContent":["/* eslint-disable array-callback-return */\nimport React, { useState } from \"react\";\nimport { Modal, Button, Form } from \"react-bootstrap\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nfunction TodoComplete({ todo, index, setSelectedTodo }) {\n  return (\n    <div className=\"todo\">\n      <div>\n        <span>\n          {todo.title}\n        </span>\n        <br />\n        <span>\n          {todo.description}\n        </span>\n        <br />\n        <span>\n          Status: {todo.status}\n        </span>\n      </div>\n      <div>\n        <Button variant=\"primary\" onClick={() => setSelectedTodo(todo, index)}>Edit</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction TodoInComplete({ todo, index, setSelectedTodo }) {\n  return (\n    <div className=\"todo\">\n      <div>\n        <span>\n          {todo.title}\n        </span>\n        <br />\n        <span>\n          {todo.description}\n        </span>\n        <br />\n        <span>\n          Status: {todo.status}\n        </span>\n      </div>\n      <div>\n      <Button variant=\"primary\" onClick={() => setSelectedTodo(todo, index)}>Edit</Button>\n      </div>\n    </div>\n  );\n}\n\nasync function getData(setTodos) {\n  const apiUrl = \"https://virtserver.swaggerhub.com/hanabyan/todo/1.0.0/to-do-list\";\n\n  let res = await fetch(apiUrl).then(res => {\n    return res.json()\n  }).catch(() => {\n    alert(\"Opps something went wrong!\")\n    return\n  })\n\n  setTodos(res)\n}\n\nfunction App() {\n  React.useEffect(() => {\n    getData(setTodos)\n  }, []);\n\n  const [todos, setTodos] = React.useState([]);\n  const [selectedTodo, updateTodo] = useState(\n    {\n      index: 0,\n      id : 0,\n      title : \"\",\n      description : \"\",\n      status : 0,\n      createdAt : \"\",\n    }\n  );\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const setSelectedTodo = (todo, index) => {\n    handleShow();\n    todo.index = index;\n    updateTodo(todo);\n    setTitleValue(todo.title);\n    setDescriptionValue(todo.description);\n    setStatusValue(todo.status);\n  };\n  const updateTodos = index => {\n    const newTodos = [...todos];\n    newTodos[index].title = titleValue;\n    newTodos[index].description = descriptionValue;\n    newTodos[index].status = statusValue;\n    setTodos(newTodos);\n    handleClose();\n  };\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n    handleClose();\n  };\n  const [titleValue, setTitleValue] = useState(\"\");\n  const onChangeTitle = e => {\n    setTitleValue(e.target.value);\n  };\n  const [descriptionValue, setDescriptionValue] = useState(\"\");\n  const onChangeDescription = e => {\n    setDescriptionValue(e.target.value);\n  };\n  const [statusValue, setStatusValue] = useState(0);\n  const onChangeStatus = e => {\n    setStatusValue(parseInt(e.target.value));\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list mb-4\">\n        {todos.map((todo, index) => {\n          if(todo.status === 1) {\n            return <TodoComplete\n              key={index}\n              index={index}\n              todo={todo}\n              setSelectedTodo={setSelectedTodo}\n            />\n          }\n        })}\n      </div>\n\n      <div className=\"todo-list mb-4\">\n        {todos.map((todo, index) => {\n          if(todo.status === 0) {\n            return <TodoInComplete\n              key={index}\n              index={index}\n              todo={todo}\n              setSelectedTodo={setSelectedTodo}\n            />\n          }\n        })}\n      </div>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>To do</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <div>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Title</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"Title\"\n                onChange={onChangeTitle}\n                value={titleValue}\n              />\n            </Form.Group>\n          </div>\n          <div>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Description</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"description\"\n                placeholder=\"Description\"\n                onChange={onChangeDescription}\n                value={descriptionValue}\n              />\n            </Form.Group>\n          </div>\n          <div>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Status</Form.Label>\n              <Form.Select onChange={onChangeStatus}>\n                <option>Status</option>\n                <option value={1}>Completed</option>\n                <option value={0}>Not-Complete</option>\n              </Form.Select>\n            </Form.Group>\n          </div>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"success\" onClick={() => updateTodos(selectedTodo.index)}>\n            Update\n          </Button>\n          {selectedTodo.status === 0\n            ? <Button variant=\"danger\" onClick={() => removeTodo(selectedTodo.index)}>\n                Delete\n              </Button>\n            : \"\"\n          }\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}